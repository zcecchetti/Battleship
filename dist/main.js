(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>c});var r=t(537),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([n.id,":root {\n    font-size: 16px;\n    margin: 0;\n    padding: 0;\n}\n\n#body {\n    display: flex;\n    flex-direction: column;\n    margin: 0;\n    padding: 0;\n    font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n}\n\n#header {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 10vh;\n    border-bottom: 2px solid gray;\n}\n\n#contentContainer {\n    height: 85vh;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    overflow: scroll;\n}\n\n#greetingContainer {\n    margin: 0 auto;\n}\n\n#greeting {\n    font-size: 2rem;\n}\n\n#boardContainer {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: max-content;\n}\n\n#controls {\n    background-color: blueviolet;\n}\n\n#footer {\n display: flex;\n justify-content: center;\n align-items: center;\n height: 5vh;\n}\n\n.M {\n    background-color: rgb(200, 207, 214);\n}\n\n.H {\n    background-color: rgb(218, 110, 110);\n}\n\n.S {\n    background-color: brown;\n}\n\n.B {\n    background-color: aquamarine;\n}\n\n.selected {\n    background-color: gray;\n}\n\n@media screen and (max-width: 600px) {\n\n}\n\n@media screen and (min-width: 600px) {\n\n    #header {\n        font-size: 3rem;\n    }\n\n    .boards {\n        height: 30rem;\n        width: 50rem;\n        margin: 2rem calc(50vw - 25rem);\n    }\n\n    .spaceDiv {\n        height: 3rem;\n        width: 5rem;\n        border-right: 1px solid blue;\n    }\n\n    .spaceDiv:last-child {\n        border-right: 0;\n    }\n\n    .spaceDiv:hover {\n        background-color: aliceblue;\n    }\n\n    .boardRow {\n        display: flex;\n        border-bottom: 1.25px solid blue;\n        border-left: 1.25px solid blue;\n        border-right: 1.25px solid blue;\n    }\n\n    .boardRow:first-child {\n        border-top: 1.25px solid blue;\n    }\n\n\n\n    #controls {\n        height: 5rem;\n        width: 60rem;\n        margin: 0 auto;\n    }\n\n    .opponentOption {\n        padding: .5rem 1rem;\n    }\n\n    .opponentOption:hover {\n        background-color: rgb(199, 204, 208);\n        border-radius: 4px;\n    }\n\n    .selected:hover {\n        background-color: gray;\n    }\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,eAAe;IACf,SAAS;IACT,UAAU;AACd;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,UAAU;IACV,oGAAoG;AACxG;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,YAAY;IACZ,6BAA6B;AACjC;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,gBAAgB;AACpB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,4BAA4B;AAChC;;AAEA;CACC,aAAa;CACb,uBAAuB;CACvB,mBAAmB;CACnB,WAAW;AACZ;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,4BAA4B;AAChC;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;;AAEA;;AAEA;;IAEI;QACI,eAAe;IACnB;;IAEA;QACI,aAAa;QACb,YAAY;QACZ,+BAA+B;IACnC;;IAEA;QACI,YAAY;QACZ,WAAW;QACX,4BAA4B;IAChC;;IAEA;QACI,eAAe;IACnB;;IAEA;QACI,2BAA2B;IAC/B;;IAEA;QACI,aAAa;QACb,gCAAgC;QAChC,8BAA8B;QAC9B,+BAA+B;IACnC;;IAEA;QACI,6BAA6B;IACjC;;;;IAIA;QACI,YAAY;QACZ,YAAY;QACZ,cAAc;IAClB;;IAEA;QACI,mBAAmB;IACvB;;IAEA;QACI,oCAAoC;QACpC,kBAAkB;IACtB;;IAEA;QACI,sBAAsB;IAC1B;AACJ",sourcesContent:[":root {\n    font-size: 16px;\n    margin: 0;\n    padding: 0;\n}\n\n#body {\n    display: flex;\n    flex-direction: column;\n    margin: 0;\n    padding: 0;\n    font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n}\n\n#header {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 10vh;\n    border-bottom: 2px solid gray;\n}\n\n#contentContainer {\n    height: 85vh;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    overflow: scroll;\n}\n\n#greetingContainer {\n    margin: 0 auto;\n}\n\n#greeting {\n    font-size: 2rem;\n}\n\n#boardContainer {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: max-content;\n}\n\n#controls {\n    background-color: blueviolet;\n}\n\n#footer {\n display: flex;\n justify-content: center;\n align-items: center;\n height: 5vh;\n}\n\n.M {\n    background-color: rgb(200, 207, 214);\n}\n\n.H {\n    background-color: rgb(218, 110, 110);\n}\n\n.S {\n    background-color: brown;\n}\n\n.B {\n    background-color: aquamarine;\n}\n\n.selected {\n    background-color: gray;\n}\n\n@media screen and (max-width: 600px) {\n\n}\n\n@media screen and (min-width: 600px) {\n\n    #header {\n        font-size: 3rem;\n    }\n\n    .boards {\n        height: 30rem;\n        width: 50rem;\n        margin: 2rem calc(50vw - 25rem);\n    }\n\n    .spaceDiv {\n        height: 3rem;\n        width: 5rem;\n        border-right: 1px solid blue;\n    }\n\n    .spaceDiv:last-child {\n        border-right: 0;\n    }\n\n    .spaceDiv:hover {\n        background-color: aliceblue;\n    }\n\n    .boardRow {\n        display: flex;\n        border-bottom: 1.25px solid blue;\n        border-left: 1.25px solid blue;\n        border-right: 1.25px solid blue;\n    }\n\n    .boardRow:first-child {\n        border-top: 1.25px solid blue;\n    }\n\n\n\n    #controls {\n        height: 5rem;\n        width: 60rem;\n        margin: 0 auto;\n    }\n\n    .opponentOption {\n        padding: .5rem 1rem;\n    }\n\n    .opponentOption:hover {\n        background-color: rgb(199, 204, 208);\n        border-radius: 4px;\n    }\n\n    .selected:hover {\n        background-color: gray;\n    }\n}"],sourceRoot:""}]);const c=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var d=0;d<n.length;d++){var l=[].concat(n[d]);r&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},a=[],c=0;c<n.length;c++){var s=n[c],d=r.base?s[0]+r.base:s[0],l=i[d]||0,A="".concat(d," ").concat(l);i[d]=l+1;var u=t(A),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var m=o(p,r);r.byIndex=c,e.splice(c,0,{identifier:A,updater:m,references:1})}a.push(A)}return a}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var c=t(i[a]);e[c].references--}for(var s=r(n,o),d=0;d<i.length;d++){var l=t(i[d]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}i=s}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{function n(n){const e=[];for(let t=0;t<n;t++)e.push("0");return{returnArray:()=>e,hit:function(n){return e[n]="h",e},isSunk:function(){for(let t=0;t<n;t++)if("0"===e[t])return!1;return!0}}}const e=[],r=function(){e.push(r);const t=function(){const n=[],e=function(e,t,r,o){const{length:i}=e.returnArray();if("h"===t){if(i+r>9)throw"Not enough spaces"}else if("v"===t&&i+o>9)throw"Not enough spaces";for(let e=0;e<i;e++)if("h"===t){if("object"==typeof n[o][r+e])throw"Cannot place over other ship"}else if("object"==typeof n[o+e][r])throw"Cannot place over other ship";return!0},t=[],r=function(e,t){if("M"===n[t][e]||"H"===Object.values(n[t][e])[1])throw"Cannot attack already targeted space"};return{createBoard:function(){for(let e=0;e<10;e++)n[e]=["x","x","x","x","x","x","x","x","x","x"];return n},returnBoard:()=>n,isValidPlacement:e,placeShip:function(r,o,i,a){try{e(r,o,i,a),t.push(r);const{length:c}=r.returnArray();for(let e=0;e<c;e++)"h"===o?n[a][i+e]={object:r,index:e,direction:o}:"v"===o&&(n[a+e][i]={object:r,index:e,direction:o});return n}catch(n){return n}},isValidAttack:r,receiveAttack:function(e,t){try{if(r(e,t),"object"==typeof n[t][e]){const r=n[t][e].index,o=n[t][e].object;if(o.hit(r),!0===function(n){return n.isSunk()}(o)){const{direction:r}=n[t][e];for(let i=0;i<9;i++)"h"===r?n[t][i].object===o&&(n[t][i].index="S"):"v"===r&&n[i][e].object===o&&(n[i][e].index="S")}else n[t][e].index="H"}else"x"===n[t][e]&&(n[t][e]="M");return n}catch(n){return n}},isLoser:function(){for(const n in t)if(!t[n].isSunk())return!1;return!0},opponentView:function(){const e=[];for(const t in n){const r=[],o=n[t];for(const n in o){const e=o[n];"string"==typeof e?r.push(e):"S"===e.index||"H"===e.index?r.push(e.index):r.push("x")}e.push(r)}return e}}}(),o=t.createBoard(),i=[];return{playerBoard:t,shipObjectArray:i,isLoser:function(){for(const n in i)if(!i[n].isSunk())return!1;return!0},createPlayerShips:function(){const e=n(3),t=n(4),r=n(6);return i.push(e),i.push(t),i.push(r),i},showPlayerBoard:function(){return o},showOpponentView:function(){return t.opponentView()},computerHit:function(){let n,e,r=!1;for(;!1===r;){n=Math.floor(10*Math.random()),e=Math.floor(10*Math.random());try{t.receiveAttack(n,e),r=!0}catch{continue}}return!0}}};function o(n,e,t){"self"===t&&"object"==typeof n&&"string"!=typeof n.index&&e.classList.add("B"),"M"===n?e.classList.add("M"):"H"===n.index?e.classList.add("H"):"S"===n.index&&e.classList.add("S")}function i(n,e,t){e.addEventListener("click",(()=>{const r=function(n){return n===document.getElementsByClassName("selected")[0]}(e);r?function(n,e,t){const{playerBoard:r}=n,o=function(n){return n.id.split("+")}(e),i=o[0],c=o[1];if("self"!==t)try{r.receiveAttack(i,c),function(n){try{if("self"===n){const n=document.getElementById("playerBoard"),e=document.getElementById("playerBoardContainer");n.removeChild(e)}else{const n=document.getElementById("opponentBoard"),e=document.getElementById("opponentBoardContainer");n.removeChild(e)}}catch{console.log("did not remove boards")}}(t),a(n,t)}catch{console.log("attack did not work")}}(n,e,t):function(n){!function(){try{document.getElementsByClassName("selected")[0].classList.remove("selected")}catch{}}(),n.classList.add("selected")}(e)}))}function a(n,e){const t=n.showPlayerBoard(),r=document.createElement("div");for(const a in t){const c=t[a],s=document.createElement("div");s.classList.add("boardRow");for(let t=0;t<c.length;t++){const r=document.createElement("div"),d=c[t];r.classList.add("spaceDiv"),o(d,r,e),r.setAttribute("id",`${t}+${a}`),i(n,r,e),s.appendChild(r)}r.appendChild(s)}if("self"===e){const n=document.getElementById("playerBoard");r.setAttribute("id","playerBoardContainer"),r.classList.add(),n.appendChild(r)}else{const n=document.getElementById("opponentBoard");r.setAttribute("id","opponentBoardContainer"),n.appendChild(r)}}window.startGameplay=function(){const n=r(),e=n.playerBoard,t=(document.querySelector("input[name='opponentType']:checked").value,new r),o=t.playerBoard;!function(){const n=document.getElementById("greetingContainer"),e=document.getElementById("contentContainer");e.removeChild(n);const t=document.createElement("div");t.setAttribute("id","boardContainer"),e.appendChild(t);const r=document.createElement("div");r.setAttribute("id","playerBoard"),r.classList.add("boards"),t.appendChild(r);const o=document.createElement("div");o.setAttribute("id","opponentBoard"),o.classList.add("boards"),t.appendChild(o)}(),n.createPlayerShips(),t.createPlayerShips();const i=n.shipObjectArray,c=t.shipObjectArray,s=i[0],d=c[0],l=i[2],A=c[2];e.placeShip(s,"h",4,5),e.placeShip(l,"v",7,3),o.placeShip(d,"h",4,5),o.placeShip(A,"h",3,3),e.receiveAttack(1,5),e.receiveAttack(4,5),e.receiveAttack(5,5),e.receiveAttack(3,4),o.receiveAttack(1,5),o.receiveAttack(4,5),o.receiveAttack(5,5),o.receiveAttack(3,4),a(n,"self"),a(t,"opponent")};var c=t(379),s=t.n(c),d=t(795),l=t.n(d),A=t(569),u=t.n(A),p=t(565),m=t.n(p),f=t(216),h=t.n(f),C=t(589),b=t.n(C),g=t(426),v={};v.styleTagTransform=b(),v.setAttributes=m(),v.insert=u().bind(null,"head"),v.domAPI=l(),v.insertStyleElement=h(),s()(g.Z,v),g.Z&&g.Z.locals&&g.Z.locals,function(){const n=document.getElementById("greetingContainer"),e=document.createElement("form");e.setAttribute("id","gameForm"),e.setAttribute("onsubmit","startGameplay(); return false");const t=document.createElement("div"),r=document.createElement("fieldset");t.appendChild(r);const o=document.createElement("legend");o.textContent="Play versus...",r.appendChild(o);const i=document.createElement("input"),a=document.createElement("label");i.setAttribute("type","radio"),i.setAttribute("id","pvp"),a.setAttribute("for","pvp"),i.setAttribute("name","opponentType"),i.setAttribute("value",!0),i.setAttribute("required",""),a.textContent="Player";const c=document.createElement("div");c.classList.add("opponentOption"),c.appendChild(a),c.appendChild(i),r.appendChild(c);const s=document.createElement("input"),d=document.createElement("label");s.setAttribute("type","radio"),s.setAttribute("id","pvc"),d.setAttribute("for","pvc"),s.setAttribute("name","opponentType"),s.setAttribute("value",!1),d.textContent="Computer";const l=document.createElement("div");l.classList.add("opponentOption"),l.appendChild(d),l.appendChild(s),r.appendChild(l),i.addEventListener("input",(()=>{i.setCustomValidity(""),i.checkValidity()})),i.addEventListener("invalid",(()=>{i.checkValidity()||i.setCustomValidity("Please select an opponent type...")})),e.appendChild(t),n.appendChild(e);const A=document.createElement("button");A.setAttribute("type","submit"),A.textContent="Start Game",e.appendChild(A)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,